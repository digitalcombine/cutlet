# Copyright Â© 2021 Ron R Wills <ron@digitalcombine.ca>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Test the Core Language Features

# Remove the system library directory path
$library.path remove 0

import testsuite

testsuite "Language Core" {

  test "Variables" {
    local str = "string"
    if {[$str type] <> "string"} then {
      fail {["string" type] <> "string"}
    }
  }

  test "Include" {
    include "../tests/include.cutlet"
    assert {$include_var == "I got included"} {$include_var == "I got included"}
    global include_var
  }

  test "Removal of global variables" {
    global myvar = "whatever"
    assert {$myvar = "whatever"} {$myvar = "whatever"}

    global myvar =
    assert_fail {$myvar = "whatever"} {$myvar (null) = "whatever"}
  }

  #===========================================================================#

  def hello {from *args} {
    $args foreach person {
      print " Hello $person from $from"
    }
  }

  test "Frames within a frame" {
    hello Ron George Bill Jane
  }

  #===========================================================================#

  def block_test {*args} {
    local level = "level b"
    local levelb = [true]

    $args foreach parm {
      local level = "level c"
      local levelc = [true]

      uplevel {
        # This should be level c
        if {$level <> "level c"} then {
          fail "$level <> level c"
        }

        uplevel {
          # This should still be level c
          if {$level <> "level c"} then {
            fail "$level <> level c"
          }
        }
      }

      uplevel 1 {
        # This should be level b
        print "Block test at $level"
        assert {$levelb} {uplevel 1 not level b}

        uplevel 1 {
          # This should be level a
          print "Block test at $level"
        }
      }

      uplevel 2 {
        # This should be level a
        print "Block test at $level"
      }
    }
  }

  test "Uplevels" {
    global level = "level a"
    block_test 1
    global level
  }
}
