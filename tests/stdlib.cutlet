# Copyright Â© 2021 Ron R Wills <ron@digitalcombine.ca>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Test the standard library.

# Remove the system library directory path
$library.path remove 0

import testsuite

testsuite "Standard Library" {
  import stdlib

  #============================================================================

  def _throw_exception {} {
    if {[true]} then {
      raise "I threw an error from a function"
    }
  }

  test "Try Catch Throw Statements" {
    try {
      raise "I threw an error"
      fail "Uncaught exception"
    } catch err {
      if {$err endswith "I threw an error"} then {
        print " I caught an error, \"${err}\""
      } else {
        fail "Caught unexpected exception, \"${err}\""
      }
    }

    # Here were testing the block scope of the try blocks.
    try {
      local myvar = 10
      try {
        if {$myvar != 10} then {
      	  fail "Resolving \$myvar, $myvar != 10"
    	}
      } catch err {
        fail "Try block scope failed, $err"
      }
    } catch err {
      fail "Unexpected error, $err"
    }

    try {
      _throw_exception
      fail "Uncaught exception"
    } catch err {
      print " I caught an error, \"${err}\""
    }
  }

  #============================================================================

  def try_return {
    try {
      return [true]
      fail "I didn't return as expected"
    }
    return [false]
  }

  def catch_return {
    try {
      throw "Oops"
    } catch err {
      return [true]
    }
    return [false]
  }

  test "Try Catch Block Return" {
    assert {try_return} {Returning within a try block}
    assert {catch_return} {Returning within a catch block}
  }

  #============================================================================

  test "If Statements" {
    if {[true]} then {
    } else {
      fail "True logic evaluated as false"
    }

    if {[false]} then {
      fail "False logic evaluated as true"
    }
  }

  #============================================================================

  test "While Loop Statements" {
    # Basic loop test.
    local res = ""
    while {$res <> "+++++"} do {
      local res = "${res}+"
    }

    assert {$res == "+++++"} "\$res <> \"+++++\""

    # Test the break statement within a while loop.
    local res = ""
    while {$res <> "+++++"} {
      local res = "${res}+"
      if {$res == "++++"} {
        break
      }
    }

    assert {$res == "++++"} "while break \"${res}\" <> \"++++\""

    # Test the continue statement within a while loop.
    local result = ""
    while {$result < "+-+-+-++"} {
      local result = "${result}+"
      if {$result == "+-+-+-+"} then {
        continue
      }
      local result = "${result}-"
    }

    assert {$result == "+-+-+-++-"} "while continue \"${result}\" <> \"+-+-+-++-\""
  }

  test "Expr" {
    local value = 10

    #local result = [expr {$value == "15"}]
    #assert {$result} "$value == 15"
  }
}
