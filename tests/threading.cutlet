# Copyright Â© 2021 Ron R Wills <ron@digitalcombine.ca>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Test the Object Oriented library.

# Remove the system library directory path
$library.path remove 0

import testsuite

testsuite "Threading API" {
  import threading

  test "New Thread" {
    print "Hello"
    local t1 = [thread {
      print "Hello from thread"
      print "Good bye from thread"
    }]
    print "Good bye"

    $t1 join
  }

  def synced {
    $mtx {
      print "In synced area"
      sleep 0
      print "  done"
    }
  }

  test "Mutex" {
    global mtx = [mutex]

    local t1 = [thread {
      print "Thread 1 start"
      sleep 0
      synced
      print "Thread 1 end"
    }]
    local t2 = [thread {
      print "Thread 2 start"
      sleep 0
      synced
      print "Thread 2 end"
    }]
    local t3 = [thread {
      print "Thread 3 start"
      sleep 0
      synced
      print "Thread 3 end"
    }]

    $t1 join
    $t2 join
    $t3 join

    global mtx =
  }
}
