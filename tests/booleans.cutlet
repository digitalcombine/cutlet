# Copyright Â© 2021 Ron R Wills <ron@digitalcombine.ca>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Test the Boolean Type

# Remove the system library directory path
$library.path remove 0

import testsuite

testsuite "Boolean Type" {
  import stdlib

  global True [true]
  global False [false]

  test "Type" {
    assert {[$True type] = "boolean"} \
      "true isn't type boolean, returned [$True type]"

    assert {[$False type] = "boolean"} \
      "false isn't type boolean, returned [$False type]"

    try {
      $True type is a boolean
      fail "\[true type is a boolean\] didn't through an exception"
    } catch err {
      print " info: $err"
    }
  }

  test "Equality" {
    assert {[true] == [true]} \
      "true == true failed"

    assert {[false] == [false]} \
      "false == false failed"

    assert_fail {[true] == [false]} \
      "true == false failed"

    try {
      [true] ==
      fail " error: \[true\] == failed"
    } catch err {
      print " info: $err"
    }

    try {
      [true] == true values
      fail "\[true\] == true values failed"
    } catch err {
      print " info: $err"
    }
  }

  test "Inequality" {
    assert_fail {[true] <> [true]} \
      "true <> true failed"

    assert_fail {[false] <> [false]} \
      "false <> false failed"

    assert {[true] <> [false]} \
      "true <> false failed"

    try {
      [true] <>
      fail "\[true\] <> failed"
    } catch err {
      print " info: $err"
    }

    try {
      [true] <> true values
      fail "\[true\] <> true failed"
    } catch err {
      print " info: $err"
    }
  }

  test "Not" {
    assert_fail {[$True not] == $True} \
      "\[\[true\] not\] == \[true\] failed"

    assert_fail {[$False not] == $False} \
      "\[\[false\] not\] == \[false\] failed"

    try {
      $True not is inverted
      fail "\[\[true\] not is inverted\] failed"
    } catch err {
      print " info: $err"
    }
  }

  test "Logical and" {
    assert {$True and $True} \
      "true and true failed"

    assert_fail {$False and $False} \
      "false and false failed"

    assert_fail {$True and $False} \
      "true and false failed"

    try {
      $True and
      fail "\[true\] and failed"
    } catch err {
      print " info: $err"
    }

    try {
      $True and true values
      fail "\[true and true values\] failed"
    } catch err {
      print " info: $err"
    }
  }

  test "Logical nand" {
    assert_fail {$True nand $True} \
      "true nand true failed"

    assert {$False nand $False} \
      "false nand false failed"

    assert {$True nand $False} \
      "true nand false failed"

    try {
      $True nand
      fail "\[true\] nand failed"
    } catch err {
      print " info: $err"
    }

    try {
      $True nand true values
      fail "\[true nand true values\] failed"
    } catch err {
      print " info: $err"
    }
  }

  test "Logical or" {
    assert {$True or $True} \
      "true or true failed"

    assert_fail {$False or $False} \
      "false or false failed"

    assert {$True or $False} \
      "true or false failed"

    try {
      $True or
      print "\[true\] or failed"
    } catch err {
      print " info: $err"
    }

    try {
      $True or true values
      fail "\[true or true values\] failed"
    } catch err {
      print " info: $err"
    }
  }

  test "Logical nor" {
    assert_fail {$True nor $True} \
      "true nor true failed"

    assert {$False nor $False} \
      "false or false failed"

    assert_fail {$True nor $False} \
      "true or false failed"

    try {
      $True nor
      fail "\[true\] nor failed"
    } catch err {
      print " info: $err"
    }

    try {
      $True nor true values
      fail "\[true nor true values\] failed"
    } catch err {
      print " info: $err"
    }
  }

  test "Logical xor" {
    assert_fail {$True xor $True} \
      "true xor true failed"

    assert_fail {$False xor $False} \
      "false xor false failed"

    assert {$True xor $False} \
      "true xor false failed"

    try {
      $True xor
      fail "\[true\] xor failed"
    } catch err {
      print " info: $err"
    }

    try {
      $True xor true values
      fail "\[true xor true values\] failed"
    } catch err {
      print " info: $err"
    }
  }
}