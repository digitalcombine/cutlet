# Copyright Â© 2021 Ron R Wills <ron@digitalcombine.ca>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Testing Sandboxes

# Remove the system library directory path
$library.path remove 0

import testsuite

testsuite "Sandbox" {

  test "Calling function in empty sandbox" {
    global sandbox1 [sandbox]

    try {
      $sandbox1 eval {
        print "  Is there anybody out there?"
      }

      fail "Invalid function call didn't raise an exception"

    } catch err {
      print "  Successfully caught error: $err"
    }
  }

  test "Link function in sandbox" {
    #local sandbox1 [sandbox]
    $sandbox1 link print

    try {
      $sandbox1 eval {
        print "  Is there anybody out there?"
      }
      print "  Yes, we can hear you."

    } catch err {
      # We shouldn't get here.
      print $err
      global result = 1
    }
  }

  test "Attempt to access sandbox within sandbox" {
    try {
      $sandbox1 eval {
        # We shouldn't be able to access ourself this way.
        $sandbox1 link print
      }
      fail "The sandbox was able to access itself"
    } catch err {
      print "  Successfully caught error: $err"
    }
  }

  test "Import library into sandbox" {
    $sandbox1 global library.path = $library.path
    $sandbox1 link import

    try {
      $sandbox1 eval {
        import oo

        class test_class { }
      }

      # The library oo should only have been imported into the sandbox.
      try {
        class test_class { }

        fail "Sandbox importing library outside of itself"
      } catch err {
      }

    } catch err {
      fail "Sandbox failed to import library: $err"
    }
  }

  test "Uplevel within a sandbox" {
    local opps = "Opps"
    $sandbox1 link uplevel

    try {
      $sandbox1 eval {
        uplevel {
          print "$opps"
        }
      }
      fail "I was able to access frames outside of then sandbox"
    } catch err {
    }
  }
}
