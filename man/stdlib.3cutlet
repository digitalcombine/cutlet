.\" Copyright © 2018 Ron R Wills <ron@digitalcombine.ca>
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright notice,
.\"    this list of conditions and the following disclaimer.
.\"
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice,this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" 3. Neither the name of the copyright holder nor the names of its
.\"    contributors may be used to endorse or promote products derived from
.\"    this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
.\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
.\" LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate$
.Dt STDLIB 3cutlet
.Os
.Sh NAME
.Nm stdlib
.Nd cutlet standard library
.Sh LIBRARY
.Lb stdlib
.Sh SYNOPSIS
.Ic import Ar stdlib

.Bl -inset -compact
.It Ic def Ar true
.It Ic def Ar false
.It Ic def Ar eval *args
.It Ic def Ar expr *args
.It Ic def Ar if condition ¿then? body ¿elif condition ¿then? body ...? ¿else body?
.It Ic def Ar while condition ¿do? body
.It Ic def Ar break
.It Ic def Ar continue
.It Ic def Ar raise *args
.It Ic def Ar try body ¿catch varname body?
.It Ic def Ar sleep Ar seconds
.El
.Sh DESCRIPTION
The standard library is a set of functions that adds basic generic programming functionality to a cutlet interpreter.
.Ss Boolean values
.Bl -tag -width Ds
.It Ic def Ar true
Returns a true boolean variable.
.It Ic def Ar false
Returns a false boolean variable.
.El
.Bd -literal
while {[true]} do {
  # A never ending loop.
}

if {[false]} then {
  # Code that's never executed.
}
.Ed
.Ss Arbitrary Execution
.Bl -tag -width Ds
.It Ic def Ar eval *args
Takes all of its arguments and interprets them as a script.
.It Ic def Ar expr *args
Takes all of its arguments and interprets them as a script returning any
results resulting from the script. It's similar to a sub-command with the
square brackets [].
.El
.Ss Execution Flow Control
.Bl -tag -width Ds
.It Ic def Ar if condition ¿then? body ¿elif condition ¿then? body ...? ¿else body?
Basic flow control and decision making. For the first given
.Ar condition
that is true the associated
.Ar body
is executed.
.Bd -literal
if {$name == "Joe"} then {
  # Code only for Joe
} elif {$name == "Jane"} then {
  # Code only for Jane
} else {
  # Everyone else
}
.Ed
.It Ic def Ar while condition ¿do? body
Repeatedly execute
.Ar body
until
.Ar condition
evaluates as true.
.Bd -literal
while {$done != 1} {
  ...
}

while {$count < 10} do {
  ...
}
.Ed
.It Ic def Ar break
End the execution of the current block and the current looping function as
well. This is typically used to modify the execution of looping function like
.Ar while
and the
.Ar list
type
.Ar foreach
operator.
.Bd -literal
while {$done != 1} {
  # Break from the block here.
  break
  # Nothing beyond this point will get executed.
}

$list foreach item {
  # Break from the block here.
  break
  # Nothing beyond this point will get executed.
}
.Ed
.It Ic def Ar continue
End the execution of the current block and continue with next iteration.
.Bd -literal
while {$count < 10} do {
  # Break from the block here, but continue with the next loop.
  continue
}
.Ed
.El
.Ss Error Management
.Bl -tag -width Ds
.It Ic def Ar try body ¿catch varname err_body?
Catches any errors raised in
.Ar body .
If the optional catch arguments are given then the error,
.Ar varname ,
can be caught and managed in
.Ar err_body .
.Bd -literal
try {
  if {$name <> "Joe"} then {
    raise "$name is not allowed here"
  }
  # Sensitive code here
} catch errmsg {
  print $errmsg
}
.Ed
.It Ic def Ar raise *args
Raise an error with the details in
.Ar *args
that can later be caught and managed with a
.Ic try catch
function.
.El
.Ss Generic Functions
.Bl -tag -width Ds
.It Ic sleep Ar seconds
Put the program to sleep for the given amount of
.Ar seconds .
.El
.Sh SEE ALSO
.Xr cutlet 1
