/*                                                                  -*- c++ -*-
 * Copyright Â© 2018 Ron R Wills <ron@digitalcombine.ca>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 *    contributors may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#if __cplusplus < 201603L
#error This file requires compiler and library support for the ISO C++ 2017 standard.
#endif

#include <memory>
#include <variant>
#include <map>
#include <libcutlet/parser>

#if defined (_WIN32) || defined (_WIN64)
#  ifdef DLL_EXPORT
#    define DECLSPEC __declspec(dllexport)
#  else
#    define DECLSPEC __declspec(dllimport)
#  endif
#elif defined(__linux__) || defined(__FreeBSD__)
#   define DECLSPEC __attribute__((visibility("default")))
#else
#   error("Don't know how to export shared object libraries")
#endif

#ifndef _CUTLET_H
#define _CUTLET_H

#ifdef __cplusplus

namespace cutlet {
  class frame;
}

std::ostream &operator <<(std::ostream &os,
                          const cutlet::frame &frame);

namespace cutlet {

  // Token IDs
  const unsigned int T_WORD     = 1;
  const unsigned int T_VARIABLE = 2;
  const unsigned int T_STRING   = 3;
  const unsigned int T_SUBCMD   = 4;
  const unsigned int T_BLOCK    = 5;
  const unsigned int T_COMMENT  = 6;
  const unsigned int T_EOL      = 7;

  // AST node IDs
  const unsigned int A_BLOCK    = 1;
  const unsigned int A_VALUE    = 2;
  const unsigned int A_VARIABLE = 3;
  const unsigned int A_COMMAND  = 4;
  const unsigned int A_STRING   = 5;
  const unsigned int A_COMMENT  = 6;

  namespace utf8 {

    class iterator {
    public:
      using iterator_category = std::bidirectional_iterator_tag;
      using difference_type = int;
      using value_type = std::string;
      using pointer = std::string *;
      using reference = std::string &;

      iterator(pointer value);
      iterator(const std::string &value);
      iterator(const std::string &value, size_t offset);
      iterator(const iterator &other);

      iterator &operator =(const iterator &other);

      iterator &operator ++();
      iterator operator ++(int);
      iterator &operator --();
      iterator operator --(int);

      bool operator ==(const iterator &other) const;
      bool operator !=(const iterator &other) const;

      iterator operator +(int value) const;
      iterator operator -(int value) const;

      reference operator *() { return _current; }
      pointer operator ->() { return &_current; }

      iterator begin() const;
      iterator end() const;
      size_t position() const;
      size_t length() const;

      friend std::string substr(const iterator &start,
                                const iterator &end);

      friend std::string replace(const iterator &start,
                                 const iterator &end,
                                 const std::string &value);
    private:
      const std::string *_value;

      size_t _index, _length;
      std::string _current;
    };

    std::string substr(const iterator &start, const iterator &end);

    std::string replace(const iterator &start, const iterator &end,
                        const std::string &value);
  }

  /****************************************************************************
   * Core API types.
   */

  class list;
  class interpreter;
  namespace ast {
    class node;
  }

  class DECLSPEC variable {
  public:
    using pointer = std::shared_ptr<variable>;
    using weakptr = std::weak_ptr<variable>;

    virtual ~variable() noexcept;

    bool operator == (const std::string &value) const {
      return (static_cast<std::string>(*this) == value);
    }
    bool operator != (const std::string &value) const {
      return (static_cast<std::string>(*this) != value);
    }

    virtual variable::pointer operator()(pointer self,
                                         interpreter &interp,
                                         const list &arguments);

    virtual operator std::string() const;

    friend class interpreter;

  protected:
    virtual const parser::token *token() const;
  };

  template <class Ty, class... Args,
            class = typename std::enable_if<std::is_same<Ty, cutlet::variable>::value>>
  inline decltype(auto) var(Args&&... args) {
    return std::make_shared<Ty>(std::forward<Args>(args)...);
  }

  template <class Ty,
            class = typename std::enable_if<std::is_same<Ty, cutlet::variable>::value>>
  Ty &cast(variable::pointer object) {
    try {
      if (not object)
        throw std::runtime_error("Unable to cast a null reference");
      return dynamic_cast<Ty &>(*(object));
    } catch (std::bad_cast &err) {
      throw std::runtime_error(std::string("Unable to cast variable, ") +
                               err.what());
    }
  }

  template <class Ty>
  inline Ty DECLSPEC primative(variable::pointer object) {
    return static_cast<Ty>(*(object));
  }

  template <> int DECLSPEC primative<int>(variable::pointer object);
  template <> bool DECLSPEC primative<bool>(variable::pointer object);

  using debug_function_t =
    std::function<void(cutlet::interpreter &, const ast::node &)>;

  namespace ast {

    class DECLSPEC node {
    public:
      using pointer = std::shared_ptr<node>;

      static bool break_all;
      static void debugger(debug_function_t dfunc);

      virtual ~node() noexcept;

      virtual cutlet::variable::pointer
      operator()(cutlet::interpreter &interp) = 0;

      virtual unsigned int id() const = 0;

      void set_break(bool value = true);

      virtual std::string file() const = 0;

      virtual std::streampos position() const = 0;

      virtual const std::string &body() const = 0;

      virtual const parser::token &token() const = 0;

      //virtual begin()
      //virtual end()

    protected:
      node();

      /** To be used by the operator() method to implement break points.
       */
      void break_point(cutlet::interpreter &interp);

    private:
      static debug_function_t _debug_function;

      bool _break = false;
    };
  }

  class DECLSPEC exception : public std::exception {
  public:
    exception() noexcept;
    exception(const std::string &message) noexcept;
    exception(const std::string &message, ast::node &node) noexcept;
    exception(const std::exception &other) noexcept;
    exception(const cutlet::exception &other) noexcept;
    virtual ~exception() noexcept;

    exception& operator=(const exception &other) noexcept;

    virtual const char *what() const noexcept;
    const ast::node *node() const noexcept { return _node; }

  protected:
    std::string _message;
    ast::node *_node;
  };

  /****************************************************************************
   * API Data Types
   */

  class DECLSPEC string : public variable, public std::string {
  public:
    string();
    string(const string &value);
    string(const std::string &value);
    string(int value);
    virtual ~string() noexcept;

    virtual variable::pointer operator()(variable::pointer self,
                                         interpreter &interp,
                                         const list &arguments);

    virtual operator std::string() const;

    friend class interpreter;
  };

  class DECLSPEC boolean : public variable {
  public:
    boolean();
    boolean(const std::string &value);
    boolean(bool value);
    virtual ~boolean() noexcept;

    virtual variable::pointer operator()(variable::pointer self,
                                         interpreter &interp,
                                         const list &arguments);

    virtual operator std::string() const;
    operator bool() const { return _value; }

    friend class interpreter;

  private:
    bool _value;
  };

  class DECLSPEC list : public variable,
                        public std::deque<variable::pointer> {
  public:
    list();
    list(const_iterator first, const_iterator last);
    list(const std::initializer_list<variable::pointer> &items);
    list(const list &other);
    virtual ~list() noexcept;

    std::string join(const std::string &delim = " ") const;

    virtual variable::pointer operator()(variable::pointer self,
                                         interpreter &interp,
                                         const list &arguments);

    virtual operator std::string() const;
  };

  /****************************************************************************
   */

  class DECLSPEC component {
  public:
    using pointer = std::shared_ptr<component>;

    virtual ~component() noexcept;

    virtual variable::pointer
    operator ()(interpreter &interp, const list &arguments) = 0;

    virtual std::string documentation() const;
  };

  /****************************************************************************
   */

  using function_t =
    std::function<variable::pointer(interpreter &, const list &)>;

  extern "C" {
    typedef void (*libinit_t)(interpreter *);
  }

  class DECLSPEC sandbox {
  public:
    using pointer = std::shared_ptr<sandbox>;
    using const_citerator =
      std::map<std::string, component::pointer>::const_iterator;

    sandbox();
    sandbox(const sandbox &other) = delete;

    virtual ~sandbox() noexcept;

    void add(const std::string &name, function_t func,
             const std::string &doc = "");
    void add(const std::string &name, component::pointer comp);
    void remove(const std::string &name);

    void clear();

    component::pointer get(const std::string &name) const;
    const std::map<std::string, component::pointer> &components() const {
      return _components;
    }

    cutlet::variable::pointer variable(interpreter &interp,
                                       const std::string &name);
    void variable(const std::string &name, variable::pointer value);
    bool has_variable(const std::string &name);

    cutlet::variable::pointer call(interpreter &interp,
                                   const std::string &procedure,
                                   const list &arguments);

    void *symbol(const std::string &name) const;

    friend class interpreter;

  private:
    std::map<std::string, variable::pointer> _variables;
    std::map<std::string, component::pointer> _components;
    std::list<void *> _native_libs;

    void load(interpreter &interp, const std::string &library_name);
  };

  class DECLSPEC frame {
  public:
    using state_t =  enum {FS_DONE = 0, FS_RUNNING = 1, FS_BREAK = 2,
      FS_CONTINUE = 3};

    using pointer = std::shared_ptr<frame>;

    frame(const std::string &label = "-");
    frame(pointer uplevel, const std::string &label = "-");
    frame(const frame &other) = delete;

    virtual ~frame() noexcept;

    virtual cutlet::variable::pointer variable(const std::string &name) const;
    virtual void variable(const std::string &name, variable::pointer value);

    virtual list variables() const;

    virtual void done(variable::pointer result);
    virtual bool done() const;

    virtual state_t state() const;
    virtual void state(state_t new_state);

    void label(const std::string &value);
    virtual std::string label() const;

    friend class component;
    friend class interpreter;
    friend std::ostream &::operator <<(std::ostream &os,
                                       const cutlet::frame &frame);
    friend void frame_dump(std::ostream &os, const class frame &f);

  protected:
    pointer _uplevel;
    state_t _state;

    pointer uplevel(unsigned int levels) const;
    virtual pointer parent() const;

  private:
    std::string _label;
    ast::node::pointer _compiled;

    sandbox::pointer _sandbox_orig;
    std::map<std::string, variable::pointer> _variables;

    variable::pointer _return;

    virtual void parent(pointer frame);
  };

  class DECLSPEC block_frame : public cutlet::frame {
  public:
    block_frame(frame::pointer uplevel);
    block_frame(const std::string &label, frame::pointer uplevel);
    virtual ~block_frame() noexcept;

    virtual variable::pointer variable(const std::string &name) const;
    virtual void variable(const std::string &name, variable::pointer value);

    virtual void done(variable::pointer result);
    virtual bool done() const;

    virtual state_t state() const;
    virtual void state(state_t new_state);

    virtual std::string label() const;

    friend class interpreter;

  protected:
    virtual pointer parent() const;

  private:
    cutlet::frame::pointer _parent;

    virtual void parent(pointer frame);
  };

  class DECLSPEC loop_frame : public cutlet::block_frame {
  public:
    loop_frame(frame::pointer uplevel);
    loop_frame(const std::string &label, frame::pointer level);
    virtual ~loop_frame() noexcept;

    virtual bool done() const;

    virtual state_t state() const;
    virtual void state(state_t new_state);

    virtual std::string label() const;
  };

  class DECLSPEC interpreter : protected parser::grammer {
  public:
    interpreter();

    interpreter(const interpreter &other) = delete;
    interpreter &operator =(const interpreter &) = delete;

    virtual ~interpreter() noexcept;

    variable::pointer var(const std::string &name);
    void global(const std::string &name, variable::pointer value) {
      _global->variable(name, value);
    }
    void local(const std::string &name, variable::pointer value) {
      _frame->variable(name, value);
    }

    variable::pointer list(const std::string code);
    variable::pointer list(const variable::pointer code);

    template <class... Args>
      void add(Args&&... args) { _global->add(args...); }

    component::pointer get(const std::string &name) const {
      return _global->get(name);
    }
    void remove(const std::string &name) {
      _global->remove(name);
    }

    sandbox::pointer environment() const { return _global; }

    ast::node::pointer operator()(variable::pointer code);
    ast::node::pointer operator()(const std::string &code);
    ast::node::pointer operator()(const parser::token &code);
    ast::node::pointer operator()(std::istream &in,
                                  const std::string &source,
                                  bool interactive = false);

    ast::node::pointer compile_file(const std::string &filename);

    variable::pointer expr(variable::pointer cmd);
    variable::pointer expr(const std::string &cmd);

    variable::pointer call(const std::string &procedure,
                           const cutlet::list &arguments) {
      return _global->call(*this, procedure, arguments);
    }

    template <typename ty>
      ty symbol(const std::string &name) {
      return reinterpret_cast<ty>(_global->symbol(name));
    }

    cutlet::frame::pointer frame(unsigned int levels = 0) const;
    int frames() const;

    void push(const std::string &label = "-") {
      push(std::make_shared<cutlet::frame>(label));
    }
    void push(int level, const std::string &label = "-") {
      push(std::make_shared<cutlet::block_frame>(label, frame(level)));
    }
    void push(sandbox::pointer sb, const std::string &label = "-") {
      push(std::make_shared<cutlet::frame>(label), sb);
    }
    void push(frame::pointer frm);
    void push(frame::pointer frm, sandbox::pointer sb);

    variable::pointer pop();
    variable::pointer pop(variable::pointer result);
    void pop(frame::pointer frm);

    void finish(variable::pointer result = nullptr) {
      _frame->done(result);
    }

    frame::state_t state() const { return _frame->state(); }
    void state(frame::state_t new_state) { _frame->state(new_state); }

    bool done() const { return _frame->done(); }

    void load(const std::string &library_name) {
      _global->load(*this, library_name);
    }

    void import(const std::string &library_name);

    friend class component;

  protected:
    /** The entry point to the recursive descent parser. */
    virtual void entry();

    ast::node::pointer _comment();
    ast::node::pointer _command();
    ast::node::pointer _variable();
    ast::node::pointer _string();
    ast::node::pointer _subcommand();

  private:
    sandbox::pointer _global;
    frame::pointer _frame;

    ast::node::pointer _compiled;

    bool _interactive = false;

    static unsigned int _interpreters;
  };
}

std::ostream &operator <<(std::ostream &os,
                          const cutlet::frame::pointer &frame);

#endif /* __cplusplus */
#endif /* _CUTLET_H */
